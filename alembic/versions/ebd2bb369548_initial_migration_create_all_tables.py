"""Initial migration: create all tables

Revision ID: ebd2bb369548
Revises: 
Create Date: 2025-10-08 07:37:27.546895

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'ebd2bb369548'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('owners',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('phone', sa.String(length=20), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('timezone', sa.String(length=50), nullable=False),
    sa.Column('default_intent', sa.Enum('PROFIT', 'BALANCED', 'FREE_TIME', name='intentmode'), nullable=False),
    sa.Column('quiet_hours_start', sa.Time(), nullable=True),
    sa.Column('quiet_hours_end', sa.Time(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_owners_id'), 'owners', ['id'], unique=False)
    op.create_index(op.f('ix_owners_phone'), 'owners', ['phone'], unique=True)
    op.create_table('audit_logs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('owner_id', sa.Integer(), nullable=False),
    sa.Column('actor', sa.Enum('OWNER', 'CLIENT', 'SYSTEM', name='auditactor'), nullable=False),
    sa.Column('action', sa.String(length=100), nullable=False),
    sa.Column('before', sa.JSON(), nullable=True),
    sa.Column('after', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['owner_id'], ['owners.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_actor_action', 'audit_logs', ['actor', 'action'], unique=False)
    op.create_index('idx_owner_created', 'audit_logs', ['owner_id', 'created_at'], unique=False)
    op.create_index(op.f('ix_audit_logs_id'), 'audit_logs', ['id'], unique=False)
    op.create_table('availabilities',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('owner_id', sa.Integer(), nullable=False),
    sa.Column('weekday', sa.Integer(), nullable=False),
    sa.Column('start_time', sa.Time(), nullable=False),
    sa.Column('end_time', sa.Time(), nullable=False),
    sa.Column('active', sa.Boolean(), nullable=False),
    sa.CheckConstraint('weekday >= 0 AND weekday <= 6', name='check_weekday_range'),
    sa.ForeignKeyConstraint(['owner_id'], ['owners.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_owner_weekday_active', 'availabilities', ['owner_id', 'weekday', 'active'], unique=False)
    op.create_index(op.f('ix_availabilities_id'), 'availabilities', ['id'], unique=False)
    op.create_table('blocks',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('owner_id', sa.Integer(), nullable=False),
    sa.Column('date', sa.Date(), nullable=False),
    sa.Column('start_time', sa.Time(), nullable=False),
    sa.Column('end_time', sa.Time(), nullable=False),
    sa.Column('reason', sa.String(length=200), nullable=True),
    sa.ForeignKeyConstraint(['owner_id'], ['owners.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_owner_date', 'blocks', ['owner_id', 'date'], unique=False)
    op.create_index(op.f('ix_blocks_id'), 'blocks', ['id'], unique=False)
    op.create_table('clients',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('owner_id', sa.Integer(), nullable=False),
    sa.Column('phone', sa.String(length=20), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('language', sa.String(length=10), nullable=False),
    sa.Column('opt_in_move_earlier', sa.Boolean(), nullable=False),
    sa.Column('tags', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['owner_id'], ['owners.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('owner_id', 'phone', name='uq_owner_client_phone')
    )
    op.create_index('idx_owner_phone', 'clients', ['owner_id', 'phone'], unique=False)
    op.create_index(op.f('ix_clients_id'), 'clients', ['id'], unique=False)
    op.create_table('owner_settings',
    sa.Column('owner_id', sa.Integer(), nullable=False),
    sa.Column('lead_time_min', sa.Integer(), nullable=False),
    sa.Column('cancel_window_hr', sa.Integer(), nullable=False),
    sa.Column('reminder_hours', sa.JSON(), nullable=False),
    sa.Column('max_outreach_per_gap', sa.Integer(), nullable=False),
    sa.CheckConstraint('cancel_window_hr >= 0', name='check_cancel_window_positive'),
    sa.CheckConstraint('lead_time_min >= 0', name='check_lead_time_positive'),
    sa.CheckConstraint('max_outreach_per_gap >= 0', name='check_max_outreach_positive'),
    sa.ForeignKeyConstraint(['owner_id'], ['owners.id'], ),
    sa.PrimaryKeyConstraint('owner_id')
    )
    op.create_table('services',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('owner_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('duration_min', sa.Integer(), nullable=False),
    sa.Column('price_cents', sa.Integer(), nullable=False),
    sa.Column('buffer_min', sa.Integer(), nullable=False),
    sa.Column('groupable', sa.Boolean(), nullable=False),
    sa.Column('active', sa.Boolean(), nullable=False),
    sa.CheckConstraint('buffer_min >= 0', name='check_buffer_non_negative'),
    sa.CheckConstraint('duration_min > 0', name='check_duration_positive'),
    sa.CheckConstraint('price_cents >= 0', name='check_price_non_negative'),
    sa.ForeignKeyConstraint(['owner_id'], ['owners.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_owner_active', 'services', ['owner_id', 'active'], unique=False)
    op.create_index(op.f('ix_services_id'), 'services', ['id'], unique=False)
    op.create_table('appointments',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('owner_id', sa.Integer(), nullable=False),
    sa.Column('client_id', sa.Integer(), nullable=False),
    sa.Column('service_id', sa.Integer(), nullable=False),
    sa.Column('start_dt', sa.DateTime(timezone=True), nullable=False),
    sa.Column('end_dt', sa.DateTime(timezone=True), nullable=False),
    sa.Column('status', sa.Enum('PENDING', 'CONFIRMED', 'CANCELLED', 'NO_SHOW', name='appointmentstatus'), nullable=False),
    sa.Column('channel', sa.String(length=50), nullable=False),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint('end_dt > start_dt', name='check_end_after_start'),
    sa.ForeignKeyConstraint(['client_id'], ['clients.id'], ),
    sa.ForeignKeyConstraint(['owner_id'], ['owners.id'], ),
    sa.ForeignKeyConstraint(['service_id'], ['services.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_client_start_dt', 'appointments', ['client_id', 'start_dt'], unique=False)
    op.create_index('idx_owner_date_status', 'appointments', ['owner_id', 'start_dt', 'status'], unique=False)
    op.create_index('idx_owner_start_dt', 'appointments', ['owner_id', 'start_dt'], unique=False)
    op.create_index(op.f('ix_appointments_id'), 'appointments', ['id'], unique=False)
    op.create_table('waitlists',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('owner_id', sa.Integer(), nullable=False),
    sa.Column('client_id', sa.Integer(), nullable=False),
    sa.Column('service_id', sa.Integer(), nullable=False),
    sa.Column('window_start_dt', sa.DateTime(timezone=True), nullable=False),
    sa.Column('window_end_dt', sa.DateTime(timezone=True), nullable=False),
    sa.Column('priority', sa.Integer(), nullable=False),
    sa.Column('notify_count', sa.Integer(), nullable=False),
    sa.Column('last_notified_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint('notify_count >= 0', name='check_notify_count_non_negative'),
    sa.CheckConstraint('priority >= 0', name='check_priority_non_negative'),
    sa.CheckConstraint('window_end_dt > window_start_dt', name='check_window_end_after_start'),
    sa.ForeignKeyConstraint(['client_id'], ['clients.id'], ),
    sa.ForeignKeyConstraint(['owner_id'], ['owners.id'], ),
    sa.ForeignKeyConstraint(['service_id'], ['services.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_owner_window', 'waitlists', ['owner_id', 'window_start_dt', 'window_end_dt'], unique=False)
    op.create_index('idx_priority_created', 'waitlists', ['priority', 'created_at'], unique=False)
    op.create_index(op.f('ix_waitlists_id'), 'waitlists', ['id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_waitlists_id'), table_name='waitlists')
    op.drop_index('idx_priority_created', table_name='waitlists')
    op.drop_index('idx_owner_window', table_name='waitlists')
    op.drop_table('waitlists')
    op.drop_index(op.f('ix_appointments_id'), table_name='appointments')
    op.drop_index('idx_owner_start_dt', table_name='appointments')
    op.drop_index('idx_owner_date_status', table_name='appointments')
    op.drop_index('idx_client_start_dt', table_name='appointments')
    op.drop_table('appointments')
    op.drop_index(op.f('ix_services_id'), table_name='services')
    op.drop_index('idx_owner_active', table_name='services')
    op.drop_table('services')
    op.drop_table('owner_settings')
    op.drop_index(op.f('ix_clients_id'), table_name='clients')
    op.drop_index('idx_owner_phone', table_name='clients')
    op.drop_table('clients')
    op.drop_index(op.f('ix_blocks_id'), table_name='blocks')
    op.drop_index('idx_owner_date', table_name='blocks')
    op.drop_table('blocks')
    op.drop_index(op.f('ix_availabilities_id'), table_name='availabilities')
    op.drop_index('idx_owner_weekday_active', table_name='availabilities')
    op.drop_table('availabilities')
    op.drop_index(op.f('ix_audit_logs_id'), table_name='audit_logs')
    op.drop_index('idx_owner_created', table_name='audit_logs')
    op.drop_index('idx_actor_action', table_name='audit_logs')
    op.drop_table('audit_logs')
    op.drop_index(op.f('ix_owners_phone'), table_name='owners')
    op.drop_index(op.f('ix_owners_id'), table_name='owners')
    op.drop_table('owners')
    # ### end Alembic commands ###
